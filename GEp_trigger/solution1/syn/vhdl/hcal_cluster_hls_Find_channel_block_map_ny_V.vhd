-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity hcal_cluster_hls_Find_channel_block_map_ny_V_rom is 
    generic(
             DWIDTH     : integer := 4; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of hcal_cluster_hls_Find_channel_block_map_ny_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0001", 1 => "0010", 2 => "0011", 3 => "0100", 4 => "0101", 
    5 => "0110", 6 => "0111", 7 => "1000", 8 => "1001", 9 => "1010", 
    10 => "1011", 11 => "1100", 12 => "0001", 13 => "0010", 14 => "0011", 
    15 => "0100", 16 => "0101", 17 => "0110", 18 => "0111", 19 => "1000", 
    20 => "1001", 21 => "1010", 22 => "1011", 23 => "1100", 24 => "0001", 
    25 => "0010", 26 => "0011", 27 => "0100", 28 => "0101", 29 => "0110", 
    30 => "0111", 31 => "1000", 32 => "1001", 33 => "1010", 34 => "1011", 
    35 => "1100", 36 => "0001", 37 => "0010", 38 => "0011", 39 => "0100", 
    40 => "0101", 41 => "0110", 42 => "0111", 43 => "1000", 44 => "1001", 
    45 => "1010", 46 => "1011", 47 => "1100", 48 => "0001", 49 => "0010", 
    50 => "0011", 51 => "0100", 52 => "0101", 53 => "0110", 54 => "0111", 
    55 => "1000", 56 => "1001", 57 => "1010", 58 => "1011", 59 => "1100", 
    60 => "0001", 61 => "0010", 62 => "0011", 63 => "0100", 64 => "0101", 
    65 => "0110", 66 => "0111", 67 => "1000", 68 => "1001", 69 => "1010", 
    70 => "1011", 71 => "1100", 72 => "0001", 73 => "0010", 74 => "0011", 
    75 => "0100", 76 => "0101", 77 => "0110", 78 => "0111", 79 => "1000", 
    80 => "1001", 81 => "1010", 82 => "1011", 83 => "1100", 84 => "0001", 
    85 => "0010", 86 => "0011", 87 => "0100", 88 => "0101", 89 => "0110", 
    90 => "0111", 91 => "1000", 92 => "1001", 93 => "1010", 94 => "1011", 
    95 => "1100", 96 => "0001", 97 => "0010", 98 => "0011", 99 => "0100", 
    100 => "0101", 101 => "0110", 102 => "0111", 103 => "1000", 104 => "1001", 
    105 => "1010", 106 => "1011", 107 => "1100", 108 => "0001", 109 => "0010", 
    110 => "0011", 111 => "0100", 112 => "0101", 113 => "0110", 114 => "0111", 
    115 => "1000", 116 => "1001", 117 => "1010", 118 => "1011", 119 => "1100", 
    120 => "0001", 121 => "0010", 122 => "0011", 123 => "0100", 124 => "0101", 
    125 => "0110", 126 => "0111", 127 => "1000", 128 => "1001", 129 => "1010", 
    130 => "1011", 131 => "1100", 132 => "0001", 133 => "0010", 134 => "0011", 
    135 => "0100", 136 => "0101", 137 => "0110", 138 => "0111", 139 => "1000", 
    140 => "1001", 141 => "1010", 142 => "1011", 143 => "1100", 144 => "0001", 
    145 => "0010", 146 => "0011", 147 => "0100", 148 => "0101", 149 => "0110", 
    150 => "0111", 151 => "1000", 152 => "1001", 153 => "1010", 154 => "1011", 
    155 => "1100", 156 => "0001", 157 => "0010", 158 => "0011", 159 => "0100", 
    160 => "0101", 161 => "0110", 162 => "0111", 163 => "1000", 164 => "1001", 
    165 => "1010", 166 => "1011", 167 => "1100", 168 => "0001", 169 => "0010", 
    170 => "0011", 171 => "0100", 172 => "0101", 173 => "0110", 174 => "0111", 
    175 => "1000", 176 => "1001", 177 => "1010", 178 => "1011", 179 => "1100", 
    180 => "0001", 181 => "0010", 182 => "0011", 183 => "0100", 184 => "0101", 
    185 => "0110", 186 => "0111", 187 => "1000", 188 => "1001", 189 => "1010", 
    190 => "1011", 191 => "1100", 192 => "0001", 193 => "0010", 194 => "0011", 
    195 => "0100", 196 => "0101", 197 => "0110", 198 => "0111", 199 => "1000", 
    200 => "1001", 201 => "1010", 202 => "1011", 203 => "1100", 204 => "0001", 
    205 => "0010", 206 => "0011", 207 => "0100", 208 => "0101", 209 => "0110", 
    210 => "0111", 211 => "1000", 212 => "1001", 213 => "1010", 214 => "1011", 
    215 => "1100", 216 => "0001", 217 => "0010", 218 => "0011", 219 => "0100", 
    220 => "0101", 221 => "0110", 222 => "0111", 223 => "1000", 224 => "1001", 
    225 => "1010", 226 => "1011", 227 => "1100", 228 => "0001", 229 => "0010", 
    230 => "0011", 231 => "0100", 232 => "0101", 233 => "0110", 234 => "0111", 
    235 => "1000", 236 => "1001", 237 => "1010", 238 => "1011", 239 => "1100", 
    240 => "0001", 241 => "0010", 242 => "0011", 243 => "0100", 244 => "0101", 
    245 => "0110", 246 => "0111", 247 => "1000", 248 => "1001", 249 => "1010", 
    250 => "1011", 251 => "1100", 252 => "0001", 253 => "0010", 254 => "0011", 
    255 => "0100", 256 => "0101", 257 => "0110", 258 => "0111", 259 => "1000", 
    260 => "1001", 261 => "1010", 262 => "1011", 263 => "1100", 264 => "0001", 
    265 => "0010", 266 => "0011", 267 => "0100", 268 => "0101", 269 => "0110", 
    270 => "0111", 271 => "1000", 272 => "1001", 273 => "1010", 274 => "1011", 
    275 => "1100", 276 => "0001", 277 => "0010", 278 => "0011", 279 => "0100", 
    280 => "0101", 281 => "0110", 282 => "0111", 283 => "1000", 284 => "1001", 
    285 => "1010", 286 => "1011", 287 => "1100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity hcal_cluster_hls_Find_channel_block_map_ny_V is
    generic (
        DataWidth : INTEGER := 4;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of hcal_cluster_hls_Find_channel_block_map_ny_V is
    component hcal_cluster_hls_Find_channel_block_map_ny_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    hcal_cluster_hls_Find_channel_block_map_ny_V_rom_U :  component hcal_cluster_hls_Find_channel_block_map_ny_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


