-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hcal_cluster_hls_Find_cluster is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    prehits_e_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prehits_e_ce0 : OUT STD_LOGIC;
    prehits_e_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    prehits_t_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prehits_t_ce0 : OUT STD_LOGIC;
    prehits_t_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    curhits_e_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    curhits_e_ce0 : OUT STD_LOGIC;
    curhits_e_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    curhits_t_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    curhits_t_ce0 : OUT STD_LOGIC;
    curhits_t_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    afthits_e_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    afthits_e_ce0 : OUT STD_LOGIC;
    afthits_e_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    afthits_t_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    afthits_t_ce0 : OUT STD_LOGIC;
    afthits_t_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    hit_dt : IN STD_LOGIC_VECTOR (2 downto 0);
    seed_threshold : IN STD_LOGIC_VECTOR (12 downto 0);
    x : IN STD_LOGIC_VECTOR (4 downto 0);
    y : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of hcal_cluster_hls_Find_cluster is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal nhits_V_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_420 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal nhits_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal e0_V_reg_673 : STD_LOGIC_VECTOR (12 downto 0);
    signal nhits_V_addr_reg_684 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln878_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cc_t_V_reg_690 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln208_3_fu_432_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln208_3_reg_698 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln208_4_fu_435_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_V_1_fu_438_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal t1_V_1_reg_710 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln228_fu_445_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln228_reg_715 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln252_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln252_reg_722 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln878_5_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal curhits_e_load_reg_743 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln886_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_reg_758 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln886_3_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_3_reg_762 : STD_LOGIC_VECTOR (0 downto 0);
    signal op_V_addr_reg_766 : STD_LOGIC_VECTOR (3 downto 0);
    signal total_e_V_2_fu_504_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal prehits_e_load_reg_782 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln886_4_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_4_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_1_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_1_reg_797 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln886_5_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_5_reg_801 : STD_LOGIC_VECTOR (0 downto 0);
    signal op_V_addr_1_gep_fu_259_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal op_V_addr_1_reg_805 : STD_LOGIC_VECTOR (3 downto 0);
    signal total_e_V_4_fu_537_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal afthits_e_load_reg_821 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln241_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_reg_827 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_2_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_2_reg_836 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal op_V_addr_2_gep_fu_292_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal op_V_addr_2_reg_843 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln886_6_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal total_e_V_6_fu_574_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal op_V_addr_3_gep_fu_299_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln886_7_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_7_reg_859 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_fu_593_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal select_ln251_fu_605_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln251_1_fu_613_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal nhits_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal nhits_V_ce0 : STD_LOGIC;
    signal nhits_V_we0 : STD_LOGIC;
    signal nhits_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal nhits_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal nhits_V_ce1 : STD_LOGIC;
    signal nhits_V_we1 : STD_LOGIC;
    signal nhits_V_d1 : STD_LOGIC_VECTOR (3 downto 0);
    signal nblock_V_reg_306 : STD_LOGIC_VECTOR (3 downto 0);
    signal cc_e_V_reg_318 : STD_LOGIC_VECTOR (15 downto 0);
    signal total_e_V_7_reg_356 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_total_e_V_3_phi_fu_331_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal total_e_V_3_reg_328 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_total_e_V_5_phi_fu_345_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal total_e_V_5_reg_342 : STD_LOGIC_VECTOR (15 downto 0);
    signal agg_result_e_0_reg_371 : STD_LOGIC_VECTOR (15 downto 0);
    signal agg_result_t_0_reg_385 : STD_LOGIC_VECTOR (2 downto 0);
    signal agg_result_nhits_0_reg_399 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_413_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln208_fu_586_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln213_fu_470_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln878_6_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln213_fu_474_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln213_1_fu_479_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal diff_fu_484_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln208_fu_501_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln213_1_fu_516_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal diff_1_fu_520_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln208_1_fu_534_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t2_V_fu_549_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal diff_2_fu_557_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln208_2_fu_571_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln886_2_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_return_0_preg : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component hcal_cluster_hls_Find_cluster_nhits_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (3 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    nhits_V_U : component hcal_cluster_hls_Find_cluster_nhits_V
    generic map (
        DataWidth => 4,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => nhits_V_address0,
        ce0 => nhits_V_ce0,
        we0 => nhits_V_we0,
        d0 => nhits_V_d0,
        q0 => nhits_V_q0,
        address1 => nhits_V_address1,
        ce1 => nhits_V_ce1,
        we1 => nhits_V_we1,
        d1 => nhits_V_d1,
        q1 => nhits_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv5_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_return_0_preg <= x;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv4_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_return_1_preg <= y;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_return_2_preg <= agg_result_e_0_reg_371;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv3_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_return_3_preg <= agg_result_t_0_reg_385;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv4_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_return_4_preg <= agg_result_nhits_0_reg_399;
                end if; 
            end if;
        end if;
    end process;


    agg_result_e_0_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                agg_result_e_0_reg_371 <= select_ln251_fu_605_p3;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state15) and ((((icmp_ln886_5_reg_801 = ap_const_lv1_1) and (icmp_ln890_1_reg_797 = ap_const_lv1_0) and (icmp_ln886_4_reg_788 = ap_const_lv1_0)) or ((icmp_ln886_6_fu_567_p2 = ap_const_lv1_1) and (icmp_ln890_2_fu_562_p2 = ap_const_lv1_0))) or ((icmp_ln886_3_reg_762 = ap_const_lv1_1) and (icmp_ln890_reg_758 = ap_const_lv1_0) and (icmp_ln886_reg_749 = ap_const_lv1_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln878_fu_426_p2 = ap_const_lv1_1)))) then 
                agg_result_e_0_reg_371 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    agg_result_nhits_0_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                agg_result_nhits_0_reg_399 <= nhits_V_q0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state15) and ((((icmp_ln886_5_reg_801 = ap_const_lv1_1) and (icmp_ln890_1_reg_797 = ap_const_lv1_0) and (icmp_ln886_4_reg_788 = ap_const_lv1_0)) or ((icmp_ln886_6_fu_567_p2 = ap_const_lv1_1) and (icmp_ln890_2_fu_562_p2 = ap_const_lv1_0))) or ((icmp_ln886_3_reg_762 = ap_const_lv1_1) and (icmp_ln890_reg_758 = ap_const_lv1_0) and (icmp_ln886_reg_749 = ap_const_lv1_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln878_fu_426_p2 = ap_const_lv1_1)))) then 
                agg_result_nhits_0_reg_399 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    agg_result_t_0_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                agg_result_t_0_reg_385 <= select_ln251_1_fu_613_p3;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state15) and ((((icmp_ln886_5_reg_801 = ap_const_lv1_1) and (icmp_ln890_1_reg_797 = ap_const_lv1_0) and (icmp_ln886_4_reg_788 = ap_const_lv1_0)) or ((icmp_ln886_6_fu_567_p2 = ap_const_lv1_1) and (icmp_ln890_2_fu_562_p2 = ap_const_lv1_0))) or ((icmp_ln886_3_reg_762 = ap_const_lv1_1) and (icmp_ln890_reg_758 = ap_const_lv1_0) and (icmp_ln886_reg_749 = ap_const_lv1_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln878_fu_426_p2 = ap_const_lv1_1)))) then 
                agg_result_t_0_reg_385 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    cc_e_V_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                cc_e_V_reg_318 <= total_e_V_7_reg_356;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                cc_e_V_reg_318 <= zext_ln208_4_fu_435_p1;
            end if; 
        end if;
    end process;

    nblock_V_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                nblock_V_reg_306 <= add_ln691_fu_593_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                nblock_V_reg_306 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                reg_420 <= nhits_V_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                reg_420 <= nhits_V_q1;
            end if; 
        end if;
    end process;

    total_e_V_3_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln890_fu_492_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln886_fu_459_p2 = ap_const_lv1_1)))) then 
                total_e_V_3_reg_328 <= cc_e_V_reg_318;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln890_reg_758 = ap_const_lv1_0) and (icmp_ln886_reg_749 = ap_const_lv1_0))) then 
                total_e_V_3_reg_328 <= total_e_V_2_fu_504_p2;
            end if; 
        end if;
    end process;

    total_e_V_5_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_1_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                total_e_V_5_reg_342 <= total_e_V_3_reg_328;
            elsif (((icmp_ln886_4_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                total_e_V_5_reg_342 <= ap_phi_mux_total_e_V_3_phi_fu_331_p6;
            elsif (((icmp_ln890_1_reg_797 = ap_const_lv1_0) and (icmp_ln886_4_reg_788 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                total_e_V_5_reg_342 <= total_e_V_4_fu_537_p2;
            end if; 
        end if;
    end process;

    total_e_V_7_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and ((((((((((icmp_ln890_2_fu_562_p2 = ap_const_lv1_1) and (icmp_ln890_1_reg_797 = ap_const_lv1_1) and (icmp_ln886_3_reg_762 = ap_const_lv1_0)) or ((icmp_ln890_2_fu_562_p2 = ap_const_lv1_1) and (icmp_ln886_5_reg_801 = ap_const_lv1_0) and (icmp_ln886_3_reg_762 = ap_const_lv1_0))) or ((icmp_ln890_2_fu_562_p2 = ap_const_lv1_1) and (icmp_ln886_4_reg_788 = ap_const_lv1_1) and (icmp_ln886_3_reg_762 = ap_const_lv1_0))) or ((icmp_ln890_2_fu_562_p2 = ap_const_lv1_1) and (icmp_ln886_5_reg_801 = ap_const_lv1_0) and (icmp_ln890_reg_758 = ap_const_lv1_1))) or ((icmp_ln890_2_fu_562_p2 = ap_const_lv1_1) and (icmp_ln890_1_reg_797 = ap_const_lv1_1) and (icmp_ln890_reg_758 = ap_const_lv1_1))) or ((icmp_ln890_2_fu_562_p2 = ap_const_lv1_1) and (icmp_ln886_4_reg_788 = ap_const_lv1_1) and (icmp_ln890_reg_758 = ap_const_lv1_1))) or ((icmp_ln890_2_fu_562_p2 = ap_const_lv1_1) and (icmp_ln886_5_reg_801 = ap_const_lv1_0) and (icmp_ln886_reg_749 = ap_const_lv1_1))) or ((icmp_ln890_2_fu_562_p2 = ap_const_lv1_1) and (icmp_ln890_1_reg_797 = ap_const_lv1_1) and (icmp_ln886_reg_749 = ap_const_lv1_1))) or ((icmp_ln890_2_fu_562_p2 = ap_const_lv1_1) and (icmp_ln886_4_reg_788 = ap_const_lv1_1) and (icmp_ln886_reg_749 = ap_const_lv1_1))))) then 
                total_e_V_7_reg_356 <= total_e_V_5_reg_342;
            elsif (((icmp_ln241_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                total_e_V_7_reg_356 <= ap_phi_mux_total_e_V_5_phi_fu_345_p6;
            elsif (((icmp_ln890_2_reg_836 = ap_const_lv1_0) and (icmp_ln241_reg_827 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                total_e_V_7_reg_356 <= total_e_V_6_fu_574_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                afthits_e_load_reg_821 <= afthits_e_q0;
                icmp_ln241_reg_827 <= icmp_ln241_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                cc_t_V_reg_690 <= curhits_t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                curhits_e_load_reg_743 <= curhits_e_q0;
                icmp_ln886_reg_749 <= icmp_ln886_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                e0_V_reg_673 <= curhits_e_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln890_fu_492_p2 = ap_const_lv1_0))) then
                icmp_ln886_3_reg_762 <= icmp_ln886_3_fu_497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                icmp_ln886_4_reg_788 <= icmp_ln886_4_fu_510_p2;
                prehits_e_load_reg_782 <= prehits_e_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln890_1_fu_525_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                icmp_ln886_5_reg_801 <= icmp_ln886_5_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                icmp_ln886_7_reg_859 <= icmp_ln886_7_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                icmp_ln890_1_reg_797 <= icmp_ln890_1_fu_525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and ((((((((((icmp_ln890_1_reg_797 = ap_const_lv1_1) and (icmp_ln886_3_reg_762 = ap_const_lv1_0)) or ((icmp_ln886_5_reg_801 = ap_const_lv1_0) and (icmp_ln886_3_reg_762 = ap_const_lv1_0))) or ((icmp_ln886_4_reg_788 = ap_const_lv1_1) and (icmp_ln886_3_reg_762 = ap_const_lv1_0))) or ((icmp_ln886_5_reg_801 = ap_const_lv1_0) and (icmp_ln890_reg_758 = ap_const_lv1_1))) or ((icmp_ln890_1_reg_797 = ap_const_lv1_1) and (icmp_ln890_reg_758 = ap_const_lv1_1))) or ((icmp_ln886_4_reg_788 = ap_const_lv1_1) and (icmp_ln890_reg_758 = ap_const_lv1_1))) or ((icmp_ln886_5_reg_801 = ap_const_lv1_0) and (icmp_ln886_reg_749 = ap_const_lv1_1))) or ((icmp_ln890_1_reg_797 = ap_const_lv1_1) and (icmp_ln886_reg_749 = ap_const_lv1_1))) or ((icmp_ln886_4_reg_788 = ap_const_lv1_1) and (icmp_ln886_reg_749 = ap_const_lv1_1))))) then
                icmp_ln890_2_reg_836 <= icmp_ln890_2_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln890_reg_758 <= icmp_ln890_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln886_5_fu_530_p2 = ap_const_lv1_0) and (icmp_ln890_1_fu_525_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                op_V_addr_1_reg_805 <= zext_ln252_reg_722(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and ((((((((((icmp_ln886_6_fu_567_p2 = ap_const_lv1_0) and (icmp_ln890_2_fu_562_p2 = ap_const_lv1_0) and (icmp_ln890_1_reg_797 = ap_const_lv1_1) and (icmp_ln886_3_reg_762 = ap_const_lv1_0)) or ((icmp_ln886_6_fu_567_p2 = ap_const_lv1_0) and (icmp_ln890_2_fu_562_p2 = ap_const_lv1_0) and (icmp_ln886_5_reg_801 = ap_const_lv1_0) and (icmp_ln886_3_reg_762 = ap_const_lv1_0))) or ((icmp_ln886_6_fu_567_p2 = ap_const_lv1_0) and (icmp_ln890_2_fu_562_p2 = ap_const_lv1_0) and (icmp_ln886_4_reg_788 = ap_const_lv1_1) and (icmp_ln886_3_reg_762 = ap_const_lv1_0))) or ((icmp_ln886_6_fu_567_p2 = ap_const_lv1_0) and (icmp_ln890_2_fu_562_p2 = ap_const_lv1_0) and (icmp_ln886_5_reg_801 = ap_const_lv1_0) and (icmp_ln890_reg_758 = ap_const_lv1_1))) or ((icmp_ln886_6_fu_567_p2 = ap_const_lv1_0) and (icmp_ln890_2_fu_562_p2 = ap_const_lv1_0) and (icmp_ln890_1_reg_797 = ap_const_lv1_1) and (icmp_ln890_reg_758 = ap_const_lv1_1))) or ((icmp_ln886_6_fu_567_p2 = ap_const_lv1_0) and (icmp_ln890_2_fu_562_p2 = ap_const_lv1_0) and (icmp_ln886_4_reg_788 = ap_const_lv1_1) and (icmp_ln890_reg_758 = ap_const_lv1_1))) or ((icmp_ln886_6_fu_567_p2 = ap_const_lv1_0) and (icmp_ln890_2_fu_562_p2 = ap_const_lv1_0) and (icmp_ln886_5_reg_801 = ap_const_lv1_0) and (icmp_ln886_reg_749 = ap_const_lv1_1))) or ((icmp_ln886_6_fu_567_p2 = ap_const_lv1_0) and (icmp_ln890_2_fu_562_p2 = ap_const_lv1_0) and (icmp_ln890_1_reg_797 = ap_const_lv1_1) and (icmp_ln886_reg_749 = ap_const_lv1_1))) or ((icmp_ln886_6_fu_567_p2 = ap_const_lv1_0) and (icmp_ln890_2_fu_562_p2 = ap_const_lv1_0) and (icmp_ln886_4_reg_788 = ap_const_lv1_1) and (icmp_ln886_reg_749 = ap_const_lv1_1))))) then
                op_V_addr_2_reg_843 <= zext_ln252_reg_722(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_3_fu_497_p2 = ap_const_lv1_0) and (icmp_ln890_fu_492_p2 = ap_const_lv1_0))) then
                op_V_addr_reg_766 <= zext_ln252_reg_722(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    t1_V_1_reg_710(2 downto 0) <= t1_V_1_fu_438_p3(2 downto 0);
                    zext_ln208_3_reg_698(2 downto 0) <= zext_ln208_3_fu_432_p1(2 downto 0);
                    zext_ln228_reg_715(2 downto 0) <= zext_ln228_fu_445_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    zext_ln252_reg_722(3 downto 0) <= zext_ln252_fu_448_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln208_3_reg_698(3) <= '0';
    t1_V_1_reg_710(3) <= '1';
    zext_ln228_reg_715(3) <= '0';
    zext_ln252_reg_722(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln878_fu_426_p2, ap_CS_fsm_state7, icmp_ln878_5_fu_453_p2, ap_CS_fsm_state8, icmp_ln886_fu_459_p2, icmp_ln886_reg_749, icmp_ln890_fu_492_p2, icmp_ln890_reg_758, ap_CS_fsm_state9, icmp_ln886_3_fu_497_p2, icmp_ln886_3_reg_762, ap_CS_fsm_state11, icmp_ln886_4_fu_510_p2, icmp_ln886_4_reg_788, icmp_ln890_1_fu_525_p2, icmp_ln890_1_reg_797, ap_CS_fsm_state12, icmp_ln886_5_fu_530_p2, icmp_ln886_5_reg_801, ap_CS_fsm_state14, icmp_ln241_fu_543_p2, icmp_ln890_2_fu_562_p2, ap_CS_fsm_state15, icmp_ln886_6_fu_567_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln878_fu_426_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln878_5_fu_453_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln886_fu_459_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln886_3_fu_497_p2 = ap_const_lv1_1) and (icmp_ln890_fu_492_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln886_4_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln886_5_fu_530_p2 = ap_const_lv1_1) and (icmp_ln890_1_fu_525_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln241_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and ((((icmp_ln886_5_reg_801 = ap_const_lv1_1) and (icmp_ln890_1_reg_797 = ap_const_lv1_0) and (icmp_ln886_4_reg_788 = ap_const_lv1_0)) or ((icmp_ln886_6_fu_567_p2 = ap_const_lv1_1) and (icmp_ln890_2_fu_562_p2 = ap_const_lv1_0))) or ((icmp_ln886_3_reg_762 = ap_const_lv1_1) and (icmp_ln890_reg_758 = ap_const_lv1_0) and (icmp_ln886_reg_749 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln208_fu_586_p2 <= std_logic_vector(unsigned(nhits_V_q0) + unsigned(reg_420));
    add_ln691_fu_593_p2 <= std_logic_vector(unsigned(nblock_V_reg_306) + unsigned(ap_const_lv4_1));
    afthits_e_address0 <= zext_ln252_reg_722(4 - 1 downto 0);

    afthits_e_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            afthits_e_ce0 <= ap_const_logic_1;
        else 
            afthits_e_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    afthits_t_address0 <= zext_ln252_reg_722(4 - 1 downto 0);

    afthits_t_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            afthits_t_ce0 <= ap_const_logic_1;
        else 
            afthits_t_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_total_e_V_3_phi_fu_331_p6 <= total_e_V_3_reg_328;
    ap_phi_mux_total_e_V_5_phi_fu_345_p6 <= total_e_V_5_reg_342;

    ap_ready_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(x, ap_CS_fsm_state22, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_return_0 <= x;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(y, ap_CS_fsm_state22, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_return_1 <= y;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(agg_result_e_0_reg_371, ap_CS_fsm_state22, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_return_2 <= agg_result_e_0_reg_371;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(agg_result_t_0_reg_385, ap_CS_fsm_state22, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_return_3 <= agg_result_t_0_reg_385;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(agg_result_nhits_0_reg_399, ap_CS_fsm_state22, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_return_4 <= agg_result_nhits_0_reg_399;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    curhits_e_address0_assign_proc : process(ap_CS_fsm_state1, zext_ln252_fu_448_p1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            curhits_e_address0 <= zext_ln252_fu_448_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            curhits_e_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            curhits_e_address0 <= "XXXX";
        end if; 
    end process;


    curhits_e_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            curhits_e_ce0 <= ap_const_logic_1;
        else 
            curhits_e_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    curhits_t_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln252_reg_722, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            curhits_t_address0 <= zext_ln252_reg_722(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            curhits_t_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            curhits_t_address0 <= "XXXX";
        end if; 
    end process;


    curhits_t_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            curhits_t_ce0 <= ap_const_logic_1;
        else 
            curhits_t_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    diff_1_fu_520_p2 <= std_logic_vector(unsigned(t1_V_1_reg_710) - unsigned(zext_ln213_1_fu_516_p1));
    diff_2_fu_557_p2 <= std_logic_vector(unsigned(t2_V_fu_549_p3) - unsigned(zext_ln208_3_reg_698));
    diff_fu_484_p3 <= 
        sub_ln213_fu_474_p2 when (icmp_ln878_6_fu_465_p2(0) = '1') else 
        sub_ln213_1_fu_479_p2;
    grp_fu_413_p2 <= std_logic_vector(unsigned(nhits_V_q1) + unsigned(ap_const_lv4_1));
    icmp_ln241_fu_543_p2 <= "1" when (afthits_e_q0 = ap_const_lv13_0) else "0";
    icmp_ln878_5_fu_453_p2 <= "1" when (unsigned(nblock_V_reg_306) < unsigned(ap_const_lv4_9)) else "0";
    icmp_ln878_6_fu_465_p2 <= "1" when (unsigned(cc_t_V_reg_690) < unsigned(curhits_t_q0)) else "0";
    icmp_ln878_fu_426_p2 <= "1" when (unsigned(curhits_e_q0) < unsigned(seed_threshold)) else "0";
    icmp_ln886_2_fu_599_p2 <= "1" when (nhits_V_q0 = ap_const_lv4_0) else "0";
    icmp_ln886_3_fu_497_p2 <= "1" when (unsigned(curhits_e_load_reg_743) > unsigned(e0_V_reg_673)) else "0";
    icmp_ln886_4_fu_510_p2 <= "1" when (prehits_e_q0 = ap_const_lv13_0) else "0";
    icmp_ln886_5_fu_530_p2 <= "1" when (unsigned(prehits_e_load_reg_782) > unsigned(e0_V_reg_673)) else "0";
    icmp_ln886_6_fu_567_p2 <= "1" when (unsigned(afthits_e_load_reg_821) > unsigned(e0_V_reg_673)) else "0";
    icmp_ln886_7_fu_580_p2 <= "1" when (nhits_V_q1 = ap_const_lv4_0) else "0";
    icmp_ln886_fu_459_p2 <= "1" when (curhits_e_q0 = ap_const_lv13_0) else "0";
    icmp_ln890_1_fu_525_p2 <= "1" when (unsigned(diff_1_fu_520_p2) > unsigned(zext_ln228_reg_715)) else "0";
    icmp_ln890_2_fu_562_p2 <= "1" when (unsigned(diff_2_fu_557_p2) > unsigned(zext_ln228_reg_715)) else "0";
    icmp_ln890_fu_492_p2 <= "1" when (unsigned(diff_fu_484_p3) > unsigned(zext_ln228_reg_715)) else "0";
    nhits_V_addr_reg_684 <= ap_const_lv64_0(4 - 1 downto 0);

    nhits_V_address0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, op_V_addr_reg_766, ap_CS_fsm_state10, op_V_addr_1_reg_805, ap_CS_fsm_state13, op_V_addr_2_reg_843, ap_CS_fsm_state16, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            nhits_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            nhits_V_address0 <= op_V_addr_2_reg_843;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            nhits_V_address0 <= op_V_addr_1_reg_805;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            nhits_V_address0 <= op_V_addr_reg_766;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            nhits_V_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            nhits_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            nhits_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            nhits_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            nhits_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            nhits_V_address0 <= "XXXX";
        end if; 
    end process;


    nhits_V_address1_assign_proc : process(ap_CS_fsm_state2, nhits_V_addr_reg_684, ap_CS_fsm_state3, zext_ln252_reg_722, ap_CS_fsm_state9, ap_CS_fsm_state12, op_V_addr_1_gep_fu_259_p3, ap_CS_fsm_state15, op_V_addr_2_gep_fu_292_p3, op_V_addr_3_gep_fu_299_p3, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            nhits_V_address1 <= nhits_V_addr_reg_684;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            nhits_V_address1 <= op_V_addr_3_gep_fu_299_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            nhits_V_address1 <= op_V_addr_2_gep_fu_292_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            nhits_V_address1 <= op_V_addr_1_gep_fu_259_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            nhits_V_address1 <= zext_ln252_reg_722(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            nhits_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            nhits_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            nhits_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            nhits_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            nhits_V_address1 <= "XXXX";
        end if; 
    end process;


    nhits_V_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            nhits_V_ce0 <= ap_const_logic_1;
        else 
            nhits_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    nhits_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            nhits_V_ce1 <= ap_const_logic_1;
        else 
            nhits_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    nhits_V_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_fu_413_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            nhits_V_d0 <= grp_fu_413_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            nhits_V_d0 <= ap_const_lv4_0;
        else 
            nhits_V_d0 <= "XXXX";
        end if; 
    end process;


    nhits_V_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state19, ap_CS_fsm_state4, ap_CS_fsm_state5, add_ln208_fu_586_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            nhits_V_d1 <= add_ln208_fu_586_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            nhits_V_d1 <= ap_const_lv4_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            nhits_V_d1 <= ap_const_lv4_1;
        else 
            nhits_V_d1 <= "XXXX";
        end if; 
    end process;


    nhits_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln878_fu_426_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, icmp_ln886_reg_749, icmp_ln890_reg_758, ap_CS_fsm_state10, icmp_ln886_4_reg_788, icmp_ln890_1_reg_797, ap_CS_fsm_state13, icmp_ln241_reg_827, icmp_ln890_2_reg_836, ap_CS_fsm_state16, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln890_2_reg_836 = ap_const_lv1_0) and (icmp_ln241_reg_827 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln890_1_reg_797 = ap_const_lv1_0) and (icmp_ln886_4_reg_788 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln890_reg_758 = ap_const_lv1_0) and (icmp_ln886_reg_749 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln878_fu_426_p2 = ap_const_lv1_0)))) then 
            nhits_V_we0 <= ap_const_logic_1;
        else 
            nhits_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    nhits_V_we1_assign_proc : process(ap_CS_fsm_state2, icmp_ln878_fu_426_p2, ap_CS_fsm_state3, icmp_ln886_7_reg_859, ap_CS_fsm_state19, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln886_7_reg_859 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln878_fu_426_p2 = ap_const_lv1_0)))) then 
            nhits_V_we1 <= ap_const_logic_1;
        else 
            nhits_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    op_V_addr_1_gep_fu_259_p3 <= zext_ln252_reg_722(4 - 1 downto 0);
    op_V_addr_2_gep_fu_292_p3 <= zext_ln252_reg_722(4 - 1 downto 0);
    op_V_addr_3_gep_fu_299_p3 <= zext_ln252_reg_722(4 - 1 downto 0);
    prehits_e_address0 <= zext_ln252_reg_722(4 - 1 downto 0);

    prehits_e_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            prehits_e_ce0 <= ap_const_logic_1;
        else 
            prehits_e_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prehits_t_address0 <= zext_ln252_reg_722(4 - 1 downto 0);

    prehits_t_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            prehits_t_ce0 <= ap_const_logic_1;
        else 
            prehits_t_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln251_1_fu_613_p3 <= 
        ap_const_lv3_0 when (icmp_ln886_2_fu_599_p2(0) = '1') else 
        cc_t_V_reg_690;
    select_ln251_fu_605_p3 <= 
        ap_const_lv16_0 when (icmp_ln886_2_fu_599_p2(0) = '1') else 
        cc_e_V_reg_318;
    sub_ln213_1_fu_479_p2 <= std_logic_vector(unsigned(zext_ln208_3_reg_698) - unsigned(zext_ln213_fu_470_p1));
    sub_ln213_fu_474_p2 <= std_logic_vector(unsigned(zext_ln213_fu_470_p1) - unsigned(zext_ln208_3_reg_698));
    t1_V_1_fu_438_p3 <= (ap_const_lv1_1 & cc_t_V_reg_690);
    t2_V_fu_549_p3 <= (ap_const_lv1_1 & afthits_t_q0);
    total_e_V_2_fu_504_p2 <= std_logic_vector(unsigned(cc_e_V_reg_318) + unsigned(zext_ln208_fu_501_p1));
    total_e_V_4_fu_537_p2 <= std_logic_vector(unsigned(total_e_V_3_reg_328) + unsigned(zext_ln208_1_fu_534_p1));
    total_e_V_6_fu_574_p2 <= std_logic_vector(unsigned(total_e_V_5_reg_342) + unsigned(zext_ln208_2_fu_571_p1));
    zext_ln208_1_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(prehits_e_load_reg_782),16));
    zext_ln208_2_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(afthits_e_load_reg_821),16));
    zext_ln208_3_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cc_t_V_reg_690),4));
    zext_ln208_4_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e0_V_reg_673),16));
    zext_ln208_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(curhits_e_load_reg_743),16));
    zext_ln213_1_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(prehits_t_q0),4));
    zext_ln213_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(curhits_t_q0),4));
    zext_ln228_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hit_dt),4));
    zext_ln252_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nblock_V_reg_306),64));
end behav;
