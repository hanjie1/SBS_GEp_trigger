-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hcal_cluster_hls_Find_channel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    nx : IN STD_LOGIC_VECTOR (4 downto 0);
    ny : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of hcal_cluster_hls_Find_channel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv9_120 : STD_LOGIC_VECTOR (8 downto 0) := "100100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal block_map_nx_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal block_map_nx_V_ce0 : STD_LOGIC;
    signal block_map_nx_V_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal block_map_ny_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal block_map_ny_V_ce0 : STD_LOGIC;
    signal block_map_ny_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln166_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_198 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_1_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_1_reg_202 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_206 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ich_V_1_fu_167_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ich_V_1_reg_210 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln534_fu_173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_reg_215 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln870_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_225 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ch_V_reg_90 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln870_1_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal this_V_write_assign_ph_reg_102 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_this_V_write_assign_phi_fu_118_p6 : STD_LOGIC_VECTOR (8 downto 0);
    signal this_V_write_assign_reg_114 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln166_fu_129_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln166_fu_133_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln166_1_fu_145_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln166_1_fu_149_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component hcal_cluster_hls_Find_channel_block_map_nx_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component hcal_cluster_hls_Find_channel_block_map_ny_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    block_map_nx_V_U : component hcal_cluster_hls_Find_channel_block_map_nx_V
    generic map (
        DataWidth => 5,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => block_map_nx_V_address0,
        ce0 => block_map_nx_V_ce0,
        q0 => block_map_nx_V_q0);

    block_map_ny_V_U : component hcal_cluster_hls_Find_channel_block_map_ny_V
    generic map (
        DataWidth => 4,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => block_map_ny_V_address0,
        ce0 => block_map_ny_V_ce0,
        q0 => block_map_ny_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv9_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_return_preg <= ap_phi_mux_this_V_write_assign_phi_fu_118_p6;
                end if; 
            end if;
        end if;
    end process;


    ch_V_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln166_1_fu_155_p2 = ap_const_lv1_0) and (icmp_ln166_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ch_V_reg_90 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (((icmp_ln870_reg_225 = ap_const_lv1_0) and (icmp_ln878_reg_206 = ap_const_lv1_0)) or ((icmp_ln870_1_fu_183_p2 = ap_const_lv1_0) and (icmp_ln878_reg_206 = ap_const_lv1_0))))) then 
                ch_V_reg_90 <= ich_V_1_reg_210;
            end if; 
        end if;
    end process;

    this_V_write_assign_ph_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_1_fu_183_p2 = ap_const_lv1_1) and (icmp_ln870_reg_225 = ap_const_lv1_1) and (icmp_ln878_reg_206 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                this_V_write_assign_ph_reg_102 <= ch_V_reg_90;
            elsif (((icmp_ln878_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                this_V_write_assign_ph_reg_102 <= ap_const_lv9_1FF;
            end if; 
        end if;
    end process;

    this_V_write_assign_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln166_1_reg_202 = ap_const_lv1_0) and (icmp_ln166_reg_198 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                this_V_write_assign_reg_114 <= this_V_write_assign_ph_reg_102;
            elsif ((((icmp_ln166_1_fu_155_p2 = ap_const_lv1_1) and (icmp_ln166_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((icmp_ln166_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                this_V_write_assign_reg_114 <= ap_const_lv9_1FF;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ich_V_1_reg_210 <= ich_V_1_fu_167_p2;
                icmp_ln878_reg_206 <= icmp_ln878_fu_161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln166_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln166_1_reg_202 <= icmp_ln166_1_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln166_reg_198 <= icmp_ln166_fu_139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_reg_206 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln870_reg_225 <= icmp_ln870_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln534_reg_215(8 downto 0) <= zext_ln534_fu_173_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln534_reg_215(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln166_fu_139_p2, icmp_ln166_1_fu_155_p2, icmp_ln878_reg_206, icmp_ln870_reg_225, ap_CS_fsm_state4, icmp_ln870_1_fu_183_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln166_1_fu_155_p2 = ap_const_lv1_0) and (icmp_ln166_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and ((icmp_ln166_1_fu_155_p2 = ap_const_lv1_1) or (icmp_ln166_fu_139_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (((icmp_ln870_reg_225 = ap_const_lv1_0) and (icmp_ln878_reg_206 = ap_const_lv1_0)) or ((icmp_ln870_1_fu_183_p2 = ap_const_lv1_0) and (icmp_ln878_reg_206 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln166_1_fu_149_p2 <= std_logic_vector(unsigned(zext_ln166_1_fu_145_p1) + unsigned(ap_const_lv5_1F));
    add_ln166_fu_133_p2 <= std_logic_vector(unsigned(zext_ln166_fu_129_p1) + unsigned(ap_const_lv6_3F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_this_V_write_assign_phi_fu_118_p6_assign_proc : process(icmp_ln166_reg_198, icmp_ln166_1_reg_202, this_V_write_assign_ph_reg_102, this_V_write_assign_reg_114, ap_CS_fsm_state5)
    begin
        if (((icmp_ln166_1_reg_202 = ap_const_lv1_0) and (icmp_ln166_reg_198 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_this_V_write_assign_phi_fu_118_p6 <= this_V_write_assign_ph_reg_102;
        else 
            ap_phi_mux_this_V_write_assign_phi_fu_118_p6 <= this_V_write_assign_reg_114;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_this_V_write_assign_phi_fu_118_p6, ap_CS_fsm_state5, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_return <= ap_phi_mux_this_V_write_assign_phi_fu_118_p6;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    block_map_nx_V_address0 <= zext_ln534_fu_173_p1(9 - 1 downto 0);

    block_map_nx_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            block_map_nx_V_ce0 <= ap_const_logic_1;
        else 
            block_map_nx_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_map_ny_V_address0 <= zext_ln534_reg_215(9 - 1 downto 0);

    block_map_ny_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            block_map_ny_V_ce0 <= ap_const_logic_1;
        else 
            block_map_ny_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ich_V_1_fu_167_p2 <= std_logic_vector(unsigned(ch_V_reg_90) + unsigned(ap_const_lv9_1));
    icmp_ln166_1_fu_155_p2 <= "1" when (unsigned(add_ln166_1_fu_149_p2) > unsigned(ap_const_lv5_B)) else "0";
    icmp_ln166_fu_139_p2 <= "1" when (unsigned(add_ln166_fu_133_p2) > unsigned(ap_const_lv6_17)) else "0";
    icmp_ln870_1_fu_183_p2 <= "1" when (block_map_ny_V_q0 = ny) else "0";
    icmp_ln870_fu_178_p2 <= "1" when (block_map_nx_V_q0 = nx) else "0";
    icmp_ln878_fu_161_p2 <= "1" when (ch_V_reg_90 = ap_const_lv9_120) else "0";
    zext_ln166_1_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ny),5));
    zext_ln166_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nx),6));
    zext_ln534_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_V_reg_90),64));
end behav;
